package jdk8inaction.ch1.sec4;

/**
 * 1.4 默认方法
 * 比如stream() parallelStream()方法
 */

/**
 * Java 8中加入默认方法主要是为了支持库设计师，让他们能够写出更容易改进的接口。这一
 * 点会在第9章中详谈。这一方法很重要，因为你会在接口中遇到越来越多的默认方法，但由于真
 * 正需要编写默认方法的程序员相对较少，而且它们只是有助于程序改进，而不是用于编写任何具
 * 体的程序
 */

/**
 * 但这里有个问题：在Java 8之前，List<T>并没有stream或parallelStream方法，它实现
 * 的Collection<T>接口也没有，因为当初还没有想到这些方法嘛！可没有这些方法，这些代码
 * 就不能编译。
 *
 * 但给接口加入一个新方法，意味着所有的实体类都必须为其提供一个实现。语言设计者没法
 * 控制Collections所有现有的实现，这下你就进退两难了：你如何改变已发布的接口而不破坏
 * 已有的实现呢？
 * Java 8的解决方法就是打破最后一环——接口如今可以包含实现类没有提供实现的方法签名
 * 了！那谁来实现它呢？缺失的方法主体随接口提供了（因此就有了默认实现），而不是由实现类
 * 提供。
 * 这就给接口设计者提供了一个扩充接口的方式，而不会破坏现有的代码。Java 8在接口声明
 * 中使用新的default关键字来表示这一点。
 */
public class Concept {
}
